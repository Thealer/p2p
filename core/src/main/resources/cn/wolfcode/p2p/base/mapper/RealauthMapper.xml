<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.wolfcode.p2p.base.mapper.RealauthMapper" >
  <resultMap id="BaseResultMap" type="cn.wolfcode.p2p.base.domain.RealAuth" >
    <id column="id" property="id" />
    <result column="realName" property="realName" />
    <result column="sex" property="sex" />
    <result column="bornDate" property="bornDate" />
    <result column="idNumber" property="idNumber" />
    <result column="address" property="address" />
    <result column="state" property="state" />
    <result column="image1" property="image1" />
    <result column="image2" property="image2" />
    <result column="remark" property="remark" />
    <result column="auditTime" property="auditTime" />
    <result column="applyTime" property="applyTime" />

    <!--<result column="auditorId" property="auditorId" />
    <result column="applierId" property="applierId" />-->
    <association property="applier" columnPrefix="ap_" javaType="cn.wolfcode.p2p.base.domain.LoginInfo">
      <id column="id" property="id"/>
      <result column="username" property="username"/>
    </association>

    <association property="auditor" columnPrefix="au_" resultMap="cn.wolfcode.p2p.base.mapper.LoginInfoMapper.BaseResultMap"/>

  </resultMap>
  <insert id="insert" parameterType="cn.wolfcode.p2p.base.domain.RealAuth" useGeneratedKeys="true" keyProperty="id" >
    insert into realAuth (realName, sex, bornDate, idNumber, address, state, image1,
      image2, remark, auditTime, applyTime, auditorId, applierId)
    values (#{realName}, #{sex}, #{bornDate}, #{idNumber}, #{address}, #{state}, #{image1}, 
      #{image2}, #{remark}, #{auditTime}, #{applyTime}, #{auditor.id}, #{applier.id})
  </insert>
  <update id="updateByPrimaryKey" parameterType="cn.wolfcode.p2p.base.domain.RealAuth" >
    update realAuth
    set realName = #{realName},
      sex = #{sex},
      bornDate = #{bornDate},
      idNumber = #{idNumber},
      address = #{address},
      state = #{state},
      image1 = #{image1},
      image2 = #{image2},
      remark = #{remark},
      auditTime = #{auditTime},
      applyTime = #{applyTime},
      auditorId = #{auditor.id},
      applierId = #{applier.id}
    where id = #{id}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select re.id, realName, sex, bornDate, idNumber, address, re.state, image1, image2, remark,
    auditTime, applyTime, auditorId, applierId,
      ap.id ap_id,
      ap.username ap_username,
      au.id au_id,
      au.username au_username
    from realAuth re
      join logininfo ap on ap.id = re.applierId
      left join logininfo au on au.id = re.auditorId
    where re.id = #{id}
  </select>

  <sql id="base_sql">
    <where>
      <if test="state != -1">
        AND re.state = #{state}
      </if>
      <if test="beginDate != null">
        AND re.applyTime >= #{beginDate}
      </if>
      <if test="endDate != null">
        AND re.applyTime &lt;= #{endDate}
      </if>
    </where>

  </sql>

  <select id="selectForCount" resultType="java.lang.Integer">
    select count(0) from realAuth re
    <include refid="base_sql"/>
  </select>


  <select id="selectForList" resultMap="BaseResultMap">
    select re.id, realName, sex, bornDate, idNumber, address, re.state, image1, image2, remark,
      auditTime, applyTime, auditorId, applierId,
      ap.id ap_id,
      ap.username ap_username,
      au.id au_id,
      au.username au_username
    from realAuth re
      join logininfo ap on ap.id = re.applierId
      left join logininfo au on au.id = re.auditorId
    <include refid="base_sql"/>
    limit #{start},#{pageSize}

  </select>
</mapper>